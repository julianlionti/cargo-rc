generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum CargoStatus {
  AVAILABLE
  PENDING
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum CargoSize {
  SMALL
  MEDIUM
  LARGE
}

enum CargoUrgency {
  LOW
  MEDIUM
  HIGH
}

enum UserRole {
  ADMIN
  COMPANY_USER
  COMPANY_ADMIN
  DRIVER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Cargo {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  origin      String
  destination String
  weight      Float
  reward      Float
  size        CargoSize
  urgency     CargoUrgency

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?  @db.ObjectId

  originLat      Float
  originLng      Float
  destinationLat Float
  destinationLng Float

  distanceAprox Float @default(0)

  deliveryDateTime DateTime @default(now())

  assignedTo   Driver? @relation("AssignedTo", fields: [assignedToId], references: [id])
  assignedToId String? @db.ObjectId

  requestedBy   Driver? @relation("RequestedBy", fields: [requestedById], references: [id])
  requestedById String? @db.ObjectId

  status  CargoStatus
  Payment Payment[]
}

model Company {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  email  String  @unique
  cargos Cargo[]
  users  User[]
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  uid       String   @unique
  role      UserRole
  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?  @db.ObjectId

  firstName   String?
  lastName    String?
  phoneNumber String?
  bornDate    DateTime?

  Payment      Payment[]
  Notification Notification[]
  Driver       Driver?
}

model Driver {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  licenseNumber   String?
  vehicleDetails  String?
  certifications  String[]
  experienceYears Int?

  assignedCargos  Cargo[] @relation("AssignedTo")
  requestedCargos Cargo[] @relation("RequestedBy")

  lastKnownLat     Float?
  lastKnownLng     Float?
  lastLocationTime DateTime?
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  status        PaymentStatus
  cargo         Cargo         @relation(fields: [cargoId], references: [id])
  cargoId       String        @db.ObjectId
  initiatedBy   User          @relation(fields: [initiatedById], references: [id])
  initiatedById String        @db.ObjectId
  createdAt     DateTime      @default(now())
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
