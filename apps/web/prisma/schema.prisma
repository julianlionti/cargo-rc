// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum CargoStatus {
  AVAILABLE
  IN_TRANSIT
  DELIVERED
  PICKED_UP
  CANCELLED
}

enum CargoSize {
  SMALL
  MEDIUM
  LARGE
}

enum CargoUrgency {
  LOW
  MEDIUM
  HIGH
}

model Cargo {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  origin      String
  destination String
  weight      Float
  reward      Float // Track the reward
  size        CargoSize // Enum for size (small, medium, large)
  urgency     CargoUrgency // Enum for urgency (low, medium, high)

  company String

  originLat Float // Latitude for the origin location
  originLng Float // Longitude for the origin location

  destinationLat Float // Latitude for the destination location
  destinationLng Float // Longitude for the destination location

  assignedTo   Driver?     @relation(fields: [assignedToId], references: [id])
  assignedToId String?     @db.ObjectId
  status       CargoStatus // Enum for cargo status
  Company      Company?    @relation(fields: [companyId], references: [id])
  companyId    String?     @db.ObjectId
  Payment      Payment[]
}

model Driver {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String  @unique
  assignedCargos Cargo[] // Relates the driver to the cargos they are assigned to
}

model Company {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  email  String  @unique
  cargos Cargo[] // Cargos listed by the company
  User   User[]
}

model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String         @unique
  role         UserRole
  company      Company?       @relation(fields: [companyId], references: [id])
  companyId    String?        @db.ObjectId
  Payment      Payment[]
  Notification Notification[]
}

enum UserRole {
  ADMIN
  COMPANY
  DRIVER
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  status        PaymentStatus
  cargo         Cargo         @relation(fields: [cargoId], references: [id])
  cargoId       String        @db.ObjectId
  initiatedBy   User          @relation(fields: [initiatedById], references: [id])
  initiatedById String        @db.ObjectId
  createdAt     DateTime      @default(now())
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
